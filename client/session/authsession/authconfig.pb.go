// Code generated by protoc-gen-gogo.
// source: authconfig.proto
// DO NOT EDIT!

/*
	Package authsession is a generated protocol buffer package.

	It is generated from these files:
		authconfig.proto

	It has these top-level messages:
		AuthConfig
		AuthConfigs
		GetTokenResponse
		GetTokenRequest
*/
package authsession

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AuthConfig struct {
	Username      string `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
	Password      string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	Auth          string `protobuf:"bytes,3,opt,name=Auth,proto3" json:"Auth,omitempty"`
	Email         string `protobuf:"bytes,4,opt,name=Email,proto3" json:"Email,omitempty"`
	ServerAddress string `protobuf:"bytes,5,opt,name=ServerAddress,proto3" json:"ServerAddress,omitempty"`
	IdentityToken string `protobuf:"bytes,6,opt,name=IdentityToken,proto3" json:"IdentityToken,omitempty"`
	RegistryToken string `protobuf:"bytes,7,opt,name=RegistryToken,proto3" json:"RegistryToken,omitempty"`
}

func (m *AuthConfig) Reset()                    { *m = AuthConfig{} }
func (*AuthConfig) ProtoMessage()               {}
func (*AuthConfig) Descriptor() ([]byte, []int) { return fileDescriptorAuthconfig, []int{0} }

func (m *AuthConfig) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AuthConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AuthConfig) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

func (m *AuthConfig) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AuthConfig) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

func (m *AuthConfig) GetIdentityToken() string {
	if m != nil {
		return m.IdentityToken
	}
	return ""
}

func (m *AuthConfig) GetRegistryToken() string {
	if m != nil {
		return m.RegistryToken
	}
	return ""
}

type AuthConfigs struct {
	Auths map[string]*AuthConfig `protobuf:"bytes,1,rep,name=Auths" json:"Auths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AuthConfigs) Reset()                    { *m = AuthConfigs{} }
func (*AuthConfigs) ProtoMessage()               {}
func (*AuthConfigs) Descriptor() ([]byte, []int) { return fileDescriptorAuthconfig, []int{1} }

func (m *AuthConfigs) GetAuths() map[string]*AuthConfig {
	if m != nil {
		return m.Auths
	}
	return nil
}

type GetTokenResponse struct {
	AccessToken string `protobuf:"bytes,1,opt,name=AccessToken,proto3" json:"AccessToken,omitempty"`
	ExpiresIn   int32  `protobuf:"varint,2,opt,name=ExpiresIn,proto3" json:"ExpiresIn,omitempty"`
	IssuedAt    int64  `protobuf:"varint,3,opt,name=IssuedAt,proto3" json:"IssuedAt,omitempty"`
}

func (m *GetTokenResponse) Reset()                    { *m = GetTokenResponse{} }
func (*GetTokenResponse) ProtoMessage()               {}
func (*GetTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptorAuthconfig, []int{2} }

func (m *GetTokenResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *GetTokenResponse) GetExpiresIn() int32 {
	if m != nil {
		return m.ExpiresIn
	}
	return 0
}

func (m *GetTokenResponse) GetIssuedAt() int64 {
	if m != nil {
		return m.IssuedAt
	}
	return 0
}

type GetTokenRequest struct {
	Registry      string   `protobuf:"bytes,1,opt,name=Registry,proto3" json:"Registry,omitempty"`
	Realm         string   `protobuf:"bytes,2,opt,name=Realm,proto3" json:"Realm,omitempty"`
	Service       string   `protobuf:"bytes,3,opt,name=Service,proto3" json:"Service,omitempty"`
	ClientID      string   `protobuf:"bytes,4,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	Scopes        []string `protobuf:"bytes,5,rep,name=Scopes" json:"Scopes,omitempty"`
	SkipCache     bool     `protobuf:"varint,6,opt,name=SkipCache,proto3" json:"SkipCache,omitempty"`
	OfflineAccess bool     `protobuf:"varint,7,opt,name=OfflineAccess,proto3" json:"OfflineAccess,omitempty"`
	ForceOAuth    bool     `protobuf:"varint,8,opt,name=ForceOAuth,proto3" json:"ForceOAuth,omitempty"`
}

func (m *GetTokenRequest) Reset()                    { *m = GetTokenRequest{} }
func (*GetTokenRequest) ProtoMessage()               {}
func (*GetTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptorAuthconfig, []int{3} }

func (m *GetTokenRequest) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *GetTokenRequest) GetRealm() string {
	if m != nil {
		return m.Realm
	}
	return ""
}

func (m *GetTokenRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *GetTokenRequest) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *GetTokenRequest) GetScopes() []string {
	if m != nil {
		return m.Scopes
	}
	return nil
}

func (m *GetTokenRequest) GetSkipCache() bool {
	if m != nil {
		return m.SkipCache
	}
	return false
}

func (m *GetTokenRequest) GetOfflineAccess() bool {
	if m != nil {
		return m.OfflineAccess
	}
	return false
}

func (m *GetTokenRequest) GetForceOAuth() bool {
	if m != nil {
		return m.ForceOAuth
	}
	return false
}

func init() {
	proto.RegisterType((*AuthConfig)(nil), "authsession.AuthConfig")
	proto.RegisterType((*AuthConfigs)(nil), "authsession.AuthConfigs")
	proto.RegisterType((*GetTokenResponse)(nil), "authsession.GetTokenResponse")
	proto.RegisterType((*GetTokenRequest)(nil), "authsession.GetTokenRequest")
}
func (this *AuthConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AuthConfig)
	if !ok {
		that2, ok := that.(AuthConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Auth != that1.Auth {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.ServerAddress != that1.ServerAddress {
		return false
	}
	if this.IdentityToken != that1.IdentityToken {
		return false
	}
	if this.RegistryToken != that1.RegistryToken {
		return false
	}
	return true
}
func (this *AuthConfigs) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AuthConfigs)
	if !ok {
		that2, ok := that.(AuthConfigs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Auths) != len(that1.Auths) {
		return false
	}
	for i := range this.Auths {
		if !this.Auths[i].Equal(that1.Auths[i]) {
			return false
		}
	}
	return true
}
func (this *GetTokenResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetTokenResponse)
	if !ok {
		that2, ok := that.(GetTokenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AccessToken != that1.AccessToken {
		return false
	}
	if this.ExpiresIn != that1.ExpiresIn {
		return false
	}
	if this.IssuedAt != that1.IssuedAt {
		return false
	}
	return true
}
func (this *GetTokenRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetTokenRequest)
	if !ok {
		that2, ok := that.(GetTokenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Registry != that1.Registry {
		return false
	}
	if this.Realm != that1.Realm {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.ClientID != that1.ClientID {
		return false
	}
	if len(this.Scopes) != len(that1.Scopes) {
		return false
	}
	for i := range this.Scopes {
		if this.Scopes[i] != that1.Scopes[i] {
			return false
		}
	}
	if this.SkipCache != that1.SkipCache {
		return false
	}
	if this.OfflineAccess != that1.OfflineAccess {
		return false
	}
	if this.ForceOAuth != that1.ForceOAuth {
		return false
	}
	return true
}
func (this *AuthConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&authsession.AuthConfig{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Auth: "+fmt.Sprintf("%#v", this.Auth)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "ServerAddress: "+fmt.Sprintf("%#v", this.ServerAddress)+",\n")
	s = append(s, "IdentityToken: "+fmt.Sprintf("%#v", this.IdentityToken)+",\n")
	s = append(s, "RegistryToken: "+fmt.Sprintf("%#v", this.RegistryToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthConfigs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&authsession.AuthConfigs{")
	keysForAuths := make([]string, 0, len(this.Auths))
	for k, _ := range this.Auths {
		keysForAuths = append(keysForAuths, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAuths)
	mapStringForAuths := "map[string]*AuthConfig{"
	for _, k := range keysForAuths {
		mapStringForAuths += fmt.Sprintf("%#v: %#v,", k, this.Auths[k])
	}
	mapStringForAuths += "}"
	if this.Auths != nil {
		s = append(s, "Auths: "+mapStringForAuths+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTokenResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&authsession.GetTokenResponse{")
	s = append(s, "AccessToken: "+fmt.Sprintf("%#v", this.AccessToken)+",\n")
	s = append(s, "ExpiresIn: "+fmt.Sprintf("%#v", this.ExpiresIn)+",\n")
	s = append(s, "IssuedAt: "+fmt.Sprintf("%#v", this.IssuedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTokenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&authsession.GetTokenRequest{")
	s = append(s, "Registry: "+fmt.Sprintf("%#v", this.Registry)+",\n")
	s = append(s, "Realm: "+fmt.Sprintf("%#v", this.Realm)+",\n")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "ClientID: "+fmt.Sprintf("%#v", this.ClientID)+",\n")
	s = append(s, "Scopes: "+fmt.Sprintf("%#v", this.Scopes)+",\n")
	s = append(s, "SkipCache: "+fmt.Sprintf("%#v", this.SkipCache)+",\n")
	s = append(s, "OfflineAccess: "+fmt.Sprintf("%#v", this.OfflineAccess)+",\n")
	s = append(s, "ForceOAuth: "+fmt.Sprintf("%#v", this.ForceOAuth)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAuthconfig(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AuthConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthconfig(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthconfig(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Auth) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthconfig(dAtA, i, uint64(len(m.Auth)))
		i += copy(dAtA[i:], m.Auth)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthconfig(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.ServerAddress) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAuthconfig(dAtA, i, uint64(len(m.ServerAddress)))
		i += copy(dAtA[i:], m.ServerAddress)
	}
	if len(m.IdentityToken) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAuthconfig(dAtA, i, uint64(len(m.IdentityToken)))
		i += copy(dAtA[i:], m.IdentityToken)
	}
	if len(m.RegistryToken) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAuthconfig(dAtA, i, uint64(len(m.RegistryToken)))
		i += copy(dAtA[i:], m.RegistryToken)
	}
	return i, nil
}

func (m *AuthConfigs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthConfigs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Auths) > 0 {
		for k, _ := range m.Auths {
			dAtA[i] = 0xa
			i++
			v := m.Auths[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovAuthconfig(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovAuthconfig(uint64(len(k))) + msgSize
			i = encodeVarintAuthconfig(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAuthconfig(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintAuthconfig(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *GetTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccessToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthconfig(dAtA, i, uint64(len(m.AccessToken)))
		i += copy(dAtA[i:], m.AccessToken)
	}
	if m.ExpiresIn != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAuthconfig(dAtA, i, uint64(m.ExpiresIn))
	}
	if m.IssuedAt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAuthconfig(dAtA, i, uint64(m.IssuedAt))
	}
	return i, nil
}

func (m *GetTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Registry) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthconfig(dAtA, i, uint64(len(m.Registry)))
		i += copy(dAtA[i:], m.Registry)
	}
	if len(m.Realm) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthconfig(dAtA, i, uint64(len(m.Realm)))
		i += copy(dAtA[i:], m.Realm)
	}
	if len(m.Service) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthconfig(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if len(m.ClientID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthconfig(dAtA, i, uint64(len(m.ClientID)))
		i += copy(dAtA[i:], m.ClientID)
	}
	if len(m.Scopes) > 0 {
		for _, s := range m.Scopes {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.SkipCache {
		dAtA[i] = 0x30
		i++
		if m.SkipCache {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OfflineAccess {
		dAtA[i] = 0x38
		i++
		if m.OfflineAccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ForceOAuth {
		dAtA[i] = 0x40
		i++
		if m.ForceOAuth {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Authconfig(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Authconfig(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAuthconfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AuthConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthconfig(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAuthconfig(uint64(l))
	}
	l = len(m.Auth)
	if l > 0 {
		n += 1 + l + sovAuthconfig(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovAuthconfig(uint64(l))
	}
	l = len(m.ServerAddress)
	if l > 0 {
		n += 1 + l + sovAuthconfig(uint64(l))
	}
	l = len(m.IdentityToken)
	if l > 0 {
		n += 1 + l + sovAuthconfig(uint64(l))
	}
	l = len(m.RegistryToken)
	if l > 0 {
		n += 1 + l + sovAuthconfig(uint64(l))
	}
	return n
}

func (m *AuthConfigs) Size() (n int) {
	var l int
	_ = l
	if len(m.Auths) > 0 {
		for k, v := range m.Auths {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAuthconfig(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovAuthconfig(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAuthconfig(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GetTokenResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovAuthconfig(uint64(l))
	}
	if m.ExpiresIn != 0 {
		n += 1 + sovAuthconfig(uint64(m.ExpiresIn))
	}
	if m.IssuedAt != 0 {
		n += 1 + sovAuthconfig(uint64(m.IssuedAt))
	}
	return n
}

func (m *GetTokenRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Registry)
	if l > 0 {
		n += 1 + l + sovAuthconfig(uint64(l))
	}
	l = len(m.Realm)
	if l > 0 {
		n += 1 + l + sovAuthconfig(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovAuthconfig(uint64(l))
	}
	l = len(m.ClientID)
	if l > 0 {
		n += 1 + l + sovAuthconfig(uint64(l))
	}
	if len(m.Scopes) > 0 {
		for _, s := range m.Scopes {
			l = len(s)
			n += 1 + l + sovAuthconfig(uint64(l))
		}
	}
	if m.SkipCache {
		n += 2
	}
	if m.OfflineAccess {
		n += 2
	}
	if m.ForceOAuth {
		n += 2
	}
	return n
}

func sovAuthconfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAuthconfig(x uint64) (n int) {
	return sovAuthconfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AuthConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthConfig{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Auth:` + fmt.Sprintf("%v", this.Auth) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`ServerAddress:` + fmt.Sprintf("%v", this.ServerAddress) + `,`,
		`IdentityToken:` + fmt.Sprintf("%v", this.IdentityToken) + `,`,
		`RegistryToken:` + fmt.Sprintf("%v", this.RegistryToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthConfigs) String() string {
	if this == nil {
		return "nil"
	}
	keysForAuths := make([]string, 0, len(this.Auths))
	for k, _ := range this.Auths {
		keysForAuths = append(keysForAuths, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAuths)
	mapStringForAuths := "map[string]*AuthConfig{"
	for _, k := range keysForAuths {
		mapStringForAuths += fmt.Sprintf("%v: %v,", k, this.Auths[k])
	}
	mapStringForAuths += "}"
	s := strings.Join([]string{`&AuthConfigs{`,
		`Auths:` + mapStringForAuths + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTokenResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTokenResponse{`,
		`AccessToken:` + fmt.Sprintf("%v", this.AccessToken) + `,`,
		`ExpiresIn:` + fmt.Sprintf("%v", this.ExpiresIn) + `,`,
		`IssuedAt:` + fmt.Sprintf("%v", this.IssuedAt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTokenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTokenRequest{`,
		`Registry:` + fmt.Sprintf("%v", this.Registry) + `,`,
		`Realm:` + fmt.Sprintf("%v", this.Realm) + `,`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`ClientID:` + fmt.Sprintf("%v", this.ClientID) + `,`,
		`Scopes:` + fmt.Sprintf("%v", this.Scopes) + `,`,
		`SkipCache:` + fmt.Sprintf("%v", this.SkipCache) + `,`,
		`OfflineAccess:` + fmt.Sprintf("%v", this.OfflineAccess) + `,`,
		`ForceOAuth:` + fmt.Sprintf("%v", this.ForceOAuth) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAuthconfig(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AuthConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthConfigs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthConfigs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthConfigs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthconfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthAuthconfig
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Auths == nil {
				m.Auths = make(map[string]*AuthConfig)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuthconfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuthconfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthAuthconfig
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthAuthconfig
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &AuthConfig{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Auths[mapkey] = mapvalue
			} else {
				var mapvalue *AuthConfig
				m.Auths[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresIn", wireType)
			}
			m.ExpiresIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresIn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuedAt", wireType)
			}
			m.IssuedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssuedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Realm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Realm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scopes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scopes = append(m.Scopes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipCache = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineAccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfflineAccess = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceOAuth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceOAuth = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthconfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthconfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthconfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAuthconfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAuthconfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAuthconfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAuthconfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthconfig   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("authconfig.proto", fileDescriptorAuthconfig) }

var fileDescriptorAuthconfig = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x93, 0x3f, 0x8f, 0xd3, 0x30,
	0x18, 0xc6, 0xeb, 0xeb, 0xb5, 0xd7, 0xba, 0x42, 0x54, 0x16, 0x82, 0xe8, 0x84, 0xac, 0xaa, 0x30,
	0x74, 0x80, 0x0e, 0xc7, 0x02, 0x6c, 0xa5, 0x14, 0xd4, 0xe9, 0xc0, 0x85, 0x0f, 0x10, 0x92, 0xb7,
	0x57, 0xab, 0xa9, 0x13, 0xfc, 0x3a, 0x07, 0xdd, 0xf8, 0x08, 0xec, 0x7c, 0x01, 0x3e, 0x0a, 0xe3,
	0x8d, 0x8c, 0xd7, 0xb0, 0x30, 0xde, 0xc2, 0x8e, 0x6c, 0x27, 0xfd, 0x33, 0xdc, 0xe6, 0xe7, 0xf1,
	0x13, 0x3b, 0xef, 0xf3, 0x4b, 0x68, 0x37, 0xcc, 0xcd, 0x22, 0x4a, 0xd5, 0x5c, 0x5e, 0x0c, 0x33,
	0x9d, 0x9a, 0x94, 0x75, 0xac, 0x83, 0x80, 0x28, 0x53, 0xd5, 0xbf, 0x26, 0x94, 0x8e, 0x72, 0xb3,
	0x18, 0xbb, 0x04, 0x3b, 0xa5, 0xad, 0x8f, 0x08, 0x5a, 0x85, 0x2b, 0x08, 0x48, 0x8f, 0x0c, 0xda,
	0x62, 0xab, 0xed, 0xde, 0xbb, 0x10, 0xf1, 0x4b, 0xaa, 0xe3, 0xe0, 0xc8, 0xef, 0x55, 0x9a, 0x31,
	0x7a, 0x6c, 0x4f, 0x09, 0xea, 0xce, 0x77, 0x6b, 0x76, 0x8f, 0x36, 0x26, 0xab, 0x50, 0x26, 0xc1,
	0xb1, 0x33, 0xbd, 0x60, 0x8f, 0xe9, 0x9d, 0x19, 0xe8, 0x4b, 0xd0, 0xa3, 0x38, 0xd6, 0x80, 0x18,
	0x34, 0xdc, 0xee, 0xa1, 0x69, 0x53, 0xd3, 0x18, 0x94, 0x91, 0x66, 0xfd, 0x21, 0x5d, 0x82, 0x0a,
	0x9a, 0x3e, 0x75, 0x60, 0xda, 0x94, 0x80, 0x0b, 0x89, 0x46, 0x97, 0xa9, 0x13, 0x9f, 0x3a, 0x30,
	0xfb, 0x3f, 0x08, 0xed, 0xec, 0x46, 0x44, 0xf6, 0x82, 0x36, 0xac, 0xc4, 0x80, 0xf4, 0xea, 0x83,
	0xce, 0xd9, 0xa3, 0xe1, 0x5e, 0x1f, 0xc3, 0xbd, 0xa0, 0x5b, 0xe3, 0x44, 0x19, 0xbd, 0x16, 0xfe,
	0x89, 0xd3, 0xf7, 0xbe, 0x2c, 0x6f, 0xb2, 0x2e, 0xad, 0x2f, 0x61, 0x5d, 0xf6, 0x64, 0x97, 0xec,
	0x29, 0x6d, 0x5c, 0x86, 0x49, 0x0e, 0xae, 0x9f, 0xce, 0xd9, 0x83, 0x5b, 0x8e, 0x16, 0x3e, 0xf5,
	0xf2, 0xe8, 0x39, 0xe9, 0x2b, 0xda, 0x7d, 0x0b, 0xc6, 0xbd, 0xa9, 0x00, 0xcc, 0x52, 0x85, 0xc0,
	0x7a, 0xb4, 0x33, 0x8a, 0x22, 0x40, 0xf4, 0x53, 0xf9, 0x0b, 0xf6, 0x2d, 0xf6, 0x90, 0xb6, 0x27,
	0x5f, 0x33, 0xa9, 0x01, 0xa7, 0xca, 0x5d, 0xd6, 0x10, 0x3b, 0xc3, 0x92, 0x9a, 0x22, 0xe6, 0x10,
	0x8f, 0x8c, 0x23, 0x52, 0x17, 0x5b, 0xdd, 0xff, 0x47, 0xe8, 0xdd, 0xdd, 0x85, 0x9f, 0x73, 0x40,
	0x63, 0xf3, 0x55, 0x65, 0x15, 0xf5, 0x4a, 0x5b, 0x8a, 0x02, 0xc2, 0x64, 0x55, 0x22, 0xf7, 0x82,
	0x05, 0xf4, 0xc4, 0x02, 0x93, 0x11, 0x94, 0xc8, 0x2b, 0x69, 0xcf, 0x1a, 0x27, 0x12, 0x94, 0x99,
	0xbe, 0x2e, 0xc1, 0x6f, 0x35, 0xbb, 0x4f, 0x9b, 0xb3, 0x28, 0xcd, 0xc0, 0x42, 0xaf, 0x0f, 0xda,
	0xa2, 0x54, 0x76, 0x9a, 0xd9, 0x52, 0x66, 0xe3, 0x30, 0x5a, 0x80, 0x23, 0xdd, 0x12, 0x3b, 0xc3,
	0x52, 0x3e, 0x9f, 0xcf, 0x13, 0xa9, 0xc0, 0x37, 0xe0, 0x28, 0xb7, 0xc4, 0xa1, 0xc9, 0x38, 0xa5,
	0x6f, 0x52, 0x1d, 0xc1, 0xb9, 0xfb, 0x0e, 0x5b, 0x2e, 0xb2, 0xe7, 0xbc, 0x7a, 0x72, 0xb5, 0xe1,
	0xb5, 0xdf, 0x1b, 0x5e, 0xbb, 0xd9, 0x70, 0xf2, 0xad, 0xe0, 0xe4, 0x67, 0xc1, 0xc9, 0xaf, 0x82,
	0x93, 0xab, 0x82, 0x93, 0xeb, 0x82, 0x93, 0xbf, 0x05, 0xaf, 0xdd, 0x14, 0x9c, 0x7c, 0xff, 0xc3,
	0x6b, 0x9f, 0x9a, 0xee, 0x57, 0x79, 0xf6, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x38, 0x2f, 0x13, 0x21,
	0x3e, 0x03, 0x00, 0x00,
}
